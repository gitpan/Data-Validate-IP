NAME
    Data::Validate::IP - ip validation methods

SYNOPSIS
      use Data::Validate::IP qw(is_ipv4);
  
      if(is_ipv4($suspect)){
            print "Looks like an ip address";
      } else {
            print "Not an ip address\n";
      }
  
      # or as an object
      my $v = Data::Validate::IP->new();
  
      die "not an ip" unless ($v->is_ipv4('domain.com'));

DESCRIPTION
    This module collects ip validation routines to make input validation,
    and untainting easier and more readable.

    All functions return an untainted value if the test passes, and undef if
    it fails. This means that you should always check for a defined status
    explicitly. Don't assume the return will be true. (e.g.
    is_username('0'))

    The value to test is always the first (and often only) argument.

FUNCTIONS
    new - constructor for OO usage
          $obj = Data::Validate::IP->new();

        *Description*
            Returns a Data::Validator::IP object. This lets you access all
            the validator function calls as methods without importing them
            into your namespace or using the clumsy
            Data::Validate::IP::function_name() format.

        *Arguments*
            None

        *Returns*
            Returns a Data::Validate::IP object

    is_ipv4 - does the value look like an ip v4 address?
          is_ipv4($value);
          or
          $obj->is_ipv4($value);

        *Description*
            Returns the untainted ip address if the test value appears to be
            a well-formed ip address.

        *Arguments*

            $value
                The potential ip to test.

        *Returns*
            Returns the untainted ip on success, undef on failure.

        *Notes, Exceptions, & Bugs*
            The function does not make any attempt to check whether an ip
            actually exists. It only looks to see that the format is
            appropriate.

    is_ipv6 - does the value look like an ip v6 address?
          is_ipv6($value);
                
        *Description*
            Returns the untainted ip address if the test value appears to be
            a well-formed ip address.

        *Arguments*

            $value
                The potential ip to test.

        *Returns*
            Returns the untainted ip on success, undef on failure.

        *Notes, Exceptions, & Bugs*
            The function does not make any attempt to check whether an ip
            actually exists. It only looks to see that the format is
            appropriate.

    is_private_ipv4 - is it a valid private ipv4 address
          is_private_ipv4($value);
          or
          $obj->is_private_ipv4($value);

        *Description*
            Returns the untainted ip address if the test value appears to be
            a well-formed private ip address.

        *Arguments*

            $value
                The potential ip to test.

        *Returns*
            Returns the untainted ip on success, undef on failure.

        *Notes, Exceptions, & Bugs*
            The function does not make any attempt to check whether an ip
            actually exists.

        *From RFC 3330*
               10.0.0.0/8 - This block is set aside for use in private networks.
               Its intended use is documented in [RFC1918].  Addresses within this
               block should not appear on the public Internet.

               172.16.0.0/12 - This block is set aside for use in private networks.
               Its intended use is documented in [RFC1918].  Addresses within this
               block should not appear on the public Internet.

               192.168.0.0/16 - This block is set aside for use in private networks.
               Its intended use is documented in [RFC1918].  Addresses within this
               block should not appear on the public Internet.

    is_loopback_ipv4 - is it a valid loopback ipv4 address
          is_loopback_ipv4($value);
          or
          $obj->is_loopback_ipv4($value);

        *Description*
            Returns the untainted ip address if the test value appears to be
            a well-formed loopback ip address.

        *Arguments*

            $value
                The potential ip to test.

        *Returns*
            Returns the untainted ip on success, undef on failure.

        *Notes, Exceptions, & Bugs*
            The function does not make any attempt to check whether an ip
            actually exists.

        *From RFC 3330*
               127.0.0.0/8 - This block is assigned for use as the Internet host
               loopback address.  A datagram sent by a higher level protocol to an
               address anywhere within this block should loop back inside the host.
               This is ordinarily implemented using only 127.0.0.1/32 for loopback,
               but no addresses within this block should ever appear on any network
               anywhere [RFC1700, page 5].

    is_testnet_ipv4 - is it a valid testnet ipv4 address
          is_testnet_ipv4($value);
          or
          $obj->is_testnet_ipv4($value);

        *Description*
            Returns the untainted ip address if the test value appears to be
            a well-formed testnet ip address.

        *Arguments*

            $value
                The potential ip to test.

        *Returns*
            Returns the untainted ip on success, undef on failure.

        *Notes, Exceptions, & Bugs*
            The function does not make any attempt to check whether an ip
            actually exists.

        *From RFC 3330*
               192.0.2.0/24 - This block is assigned as "TEST-NET" for use in
               documentation and example code.  It is often used in conjunction with
               domain names example.com or example.net in vendor and protocol
               documentation.  Addresses within this block should not appear on the
               public Internet.

    is_multicast_ipv4 - is it a valid multicast ipv4 address
          is_multicast_ipv4($value);
          or
          $obj->is_multicast_ipv4($value);

        *Description*
            Returns the untainted ip addres if the test value appears to be
            a well-formed multicast ip address.

        *Arguments*

            $value
                The potential ip to test.

        *Returns*
            Returns the untainted ip on success, undef on failure.

        *Notes, Exceptions, & Bugs*
            The function does not make any attempt to check whether an ip
            actually exists.

        *From RFC 3330*
               224.0.0.0/4 - This block, formerly known as the Class D address
               space, is allocated for use in IPv4 multicast address assignments.
               The IANA guidelines for assignments from this space are described in
               [RFC3171].

    is_linklocal_ipv4 - is it a valid link-local ipv4 address
          is_linklocal_ipv4($value);
          or
          $obj->is_linklocal_ipv4($value);

        *Description*
            Returns the untainted ip addres if the test value appears to be
            a well-formed link-local ip address.

        *Arguments*

            $value
                The potential ip to test.

        *Returns*
            Returns the untainted ip on success, undef on failure.

        *Notes, Exceptions, & Bugs*
            The function does not make any attempt to check whether an ip
            actually exists.

        *From RFC 3330*
               169.254.0.0/16 - This is the "link local" block.  It is allocated for
               communication between hosts on a single link.  Hosts obtain these
               addresses by auto-configuration, such as when a DHCP server may not
               be found.

    is_linklocal_ipv6 - is it a valid link-local ipv6 address
          is_linklocal_ipv6($value);
          or
          $obj->is_linklocal_ipv6($value);

        *Description*
            Returns the untainted ip addres if the test value appears to be
            a well-formed link-local ip address.

        *Arguments*

            $value
                The potential ip to test.

        *Returns*
            Returns the untainted ip on success, undef on failure.

        *Notes, Exceptions, & Bugs*
            The function does not make any attempt to check whether an ip
            actually exists.

        *From RFC 2462*
               A link-local address is formed by prepending the well-known link-
               local prefix FE80::0 [ADDR-ARCH] (of appropriate length) to the
               interface identifier. If the interface identifier has a length of N
               bits, the interface identifier replaces the right-most N zero bits of
               the link-local prefix.  If the interface identifier is more than 118
               bits in length, autoconfiguration fails and manual configuration is
               required. Note that interface identifiers will typically be 64-bits
               long and based on EUI-64 identifiers as described in [ADDR-ARCH].

    is_public_ipv4 - is it a valid public ipv4 address
          is_public_ipv4($value);
          or
          $obj->is_public_ipv4($value);

        *Description*
            Returns the untainted ip address if the test value appears to be
            a well-formed public ip address.

        *Arguments*

            $value
                The potential ip to test.

        *Returns*
            Returns the untainted ip on success, undef on failure.

        *Notes, Exceptions, & Bugs*
            The function does not make any attempt to check whether an ip
            actually exists or could truly route. This is true for any non-
            private/testnet/loopback ip.

SEE ALSO
    IPv4

    b<[RFC 3330] [RFC 1918] [RFC 1700]>

    IPv6

    b<[RFC 2460] [RFC 4291] [RFC 4294]>

    Data::Validate(3)

IPv6
    IPv6 Support is new, please test it thoroughly and report any bugs.

AUTHOR
    Neil Neely <neil@neely.cx>.

ACKNOWLEDGEMENTS
    Thanks to Richard Sonnen <sonnen@richardsonnen.com> for writing the
    Data::Validate module.

    Thanks to Matt Dainty <matt@bodgit-n-scarper.com> for adding the
    is_multicast_ipv4 and is_linklocal_ipv4 code.

COPYRIGHT AND LICENSE
    Copyright (c) 2005-2009 Neil Neely.

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself, either Perl version 5.8.2 or, at
    your option, any later version of Perl 5 you may have available.

